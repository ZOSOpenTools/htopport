diff --git a/zos/ZOSProcess.c b/zos/ZOSProcess.c
new file mode 100644
index 00000000..475bd40e
--- /dev/null
+++ b/zos/ZOSProcess.c
@@ -0,0 +1,63 @@
+#include "zos/ZOSProcess.h"
+
+#include <math.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+
+#include "CRT.h"
+#include "Macros.h"
+#include "Process.h"
+#include "ProvideCurses.h"
+
+/* semi-global */
+int pageSize;
+int pageSizeKB;
+
+const ProcessFieldData Process_fields[LAST_PROCESSFIELD] = {
+   [0] = { .name = "", .title = NULL, .description = NULL, .flags = 0, },
+   [PID] = { .name = "PID", .title = "PID", .description = "Process/thread ID", .flags = 0, .pidColumn = true, },
+   [COMM] = { .name = "Command", .title = "Command ", .description = "Command line", .flags = 0, },
+   [PPID] = { .name = "PPID", .title = "PPID", .description = "Parent process ID", .flags = 0, .pidColumn = true, }
+};
+
+void Process_delete(Object* cast) {
+   ZOSProcess* this = (ZOSProcess*) cast;
+   Process_done((Process*)cast);
+   free(this->cgroup_short);
+   free(this->cgroup);
+   free(this->secattr);
+   free(this);
+}
+
+static void ZOSProcess_writeField(const Process* this, RichString* str, ProcessField field) {
+   const ZOSProcess* lp = (const ZOSProcess*) this;
+   switch (field) {
+   // Add z/OS entries here
+   default:
+      Process_writeField(this, str, field);
+      return;
+   }
+}
+
+static int ZOSProcess_compareByKey(const Process* v1, const Process* v2, ProcessField key) {
+   const ZOSProcess* p1 = (const ZOSProcess*)v1;
+   const ZOSProcess* p2 = (const ZOSProcess*)v2;
+
+   switch (key) {
+   // Add z/OS entries here
+   default:
+      return Process_compareByKey_Base(v1, v2, key);
+   }
+}
+
+const ProcessClass ZOSProcess_class = {
+   .super = {
+      .extends = Class(Process),
+      .display = Process_display,
+      .delete = Process_delete,
+      .compare = Process_compare
+   },
+   .writeField = ZOSProcess_writeField,
+   .compareByKey = ZOSProcess_compareByKey
+};
